-- Author: Salvi CF

-- DML 2 solutions: Funciones, Reuniones y Operaciones de Conjuntos

-------------------- Reunión de tablas------------------------------------------------------------------------------------
-- Ejercicio 1
SELECT P.NOMBRE, P.APELLIDO1, P.APELLIDO2, D.NOMBRE
FROM PROFESORES P, DEPARTAMENTOS D
WHERE P.DEPARTAMENTO = D.CODIGO
      AND D.NOMBRE LIKE 'LENGUAJE%';

-- Ejercicio 2
SELECT A.NOMBRE, A.APELLIDO1, A.APELLIDO2, M.ASIGNATURA, ASIG.NOMBRE, M.CURSO, NVL(TO_CHAR(ASIG.PRACTICOS), 'NO TIENE')
FROM ALUMNOS A, MATRICULAR M, ASIGNATURAS ASIG
WHERE A.DNI = M.ALUMNO
      AND UPPER(A.NOMBRE) = 'NICOLAS'
      AND UPPER(A.APELLIDO1) = 'BERSABE'
      AND UPPER(A.APELLIDO2) = 'ALBA'
      AND ASIG.CODIGO = M.ASIGNATURA;

-- Otra manera de hacerlo:
SELECT ASIG.CODIGO, ASIG.NOMBRE, NVL(TO_CHAR(PRACTICOS), 'NO TIENE') PRACTICOS, MAT.CURSO
FROM ASIGNATURAS ASIG JOIN MATRICULAR MAT ON(ASIG.CODIGO = MAT.ASIGNATURA)
                      JOIN ALUMNOS ALUM ON(MAT.ALUMNO = ALUM.DNI)
WHERE ALUM.NOMBRE = 'NICOLAS'
      AND ALUM.APELLIDO1 = 'BERSABE'
      AND ALUM.APELLIDO2 = 'ALBA';

-- Ejercicio 3
SELECT P.NOMBRE, P.APELLIDO1, P.APELLIDO2, D.NOMBRE, TRUNC((CONVERT(DATE, GETDATE()) - P.ANTIGUEDAD)/7) AS SEMANAS_DOCENCIA, NEXT_DAY(CONVERT(DATE, GETDATE()), TO_CHAR(ANTIGUEDAD, 'DAY')) "SE CUMPLE SEMANA"
FROM PROFESORES P, DEPARTAMENTOS D
WHERE P.DEPARTAMENTO = D.CODIGO
      AND D.NOMBRE = 'INGENIERIA DE COMUNICACIONES';

-- Ejercicio 4
SELECT A.DNI, A.NOMBRE, A.APELLIDO1, A.APELLIDO2
FROM ALUMNOS A, MATRICULAR M, ASIGNATURAS ASIG
WHERE A.DNI = M.ALUMNO
      AND M.ASIGNATURA = ASIG.CODIGO
      AND ASIG.NOMBRE = 'BASES DE DATOS'
      AND M.CALIFICACION != 'SP';

-- Ejercicio 5
SELECT P.ID, P.NOMBRE, P.APELLIDO1, P.APELLIDO2, A.CODIGO, A.NOMBRE
FROM PROFESORES P, IMPARTIR I, ASIGNATURAS A
WHERE P.ID = I.PROFESOR
      AND I.ASIGNATURA = A.CODIGO;

-------------------- Consultas reflexivas ------------------------------------------------------------------------------------
-- Ejercicio 6
SELECT A1.NOMBRE, TRUNC(MONTHS_BETWEEN(CONVERT(DATE, GETDATE()), A1.FECHA_NACIMIENTO)/12) "EDAD 1", A2.NOMBRE, TRUNC(MONTHS_BETWEEN(CONVERT(DATE, GETDATE()), A2.FECHA_NACIMIENTO)/12, 0) "EDAD 2"
FROM ALUMNOS A1, ALUMNOS A2
WHERE UPPER(A1.APELLIDO1) = UPPER(A2.APELLIDO1)
      AND A1.DNI < A2.DNI;

-- Ejercicio 7
SELECT ALU1.APELLIDO1 "PRIMER APELLIDO", ALU2.APELLIDO1
FROM ALUMNOS ALU1, ALUMNOS ALU2
WHERE TO_CHAR(ALU1.FECHA_NACIMIENTO, 'YYYY') BETWEEN 1995 AND 1996
      AND TO_CHAR(ALU2.FECHA_NACIMIENTO, 'YYYY') BETWEEN 1995 AND 1996
      AND ALU1.DNI < ALU2.DNI;

-- otra forma:
SELECT ALU1.APELLIDO1 "PRIMER APELLIDO", ALU2.APELLIDO1
FROM ALUMNOS ALU1, ALUMNOS ALU2
WHERE AND EXTRACT(YEAR FROM ALU1.FECHA_NACIMIENTO) BETWEEN 1995 AND 1996
      AND EXTRACT(YEAR FROM ALU2.FECHA_NACIMIENTO) BETWEEN 1995 AND 1996
      AND ALU1.DNI < ALU2.DNI;

-- Ejercicio 8
SELECT P1.NOMBRE, P1.APELLIDO1, P2.NOMBRE, P2.APELLIDO1, TRUNC(MONTHS_BETWEEN(CONVERT(DATE, GETDATE()), P1.ANTIGUEDAD)/12) "AÑOS 1", TRUNC(MONTHS_BETWEEN(CONVERT(DATE, GETDATE()), P2.ANTIGUEDAD)/12) "AÑOS 2"
FROM PROFESORES P1, PROFESORES P2
WHERE P1.DEPARTAMENTO = P2.DEPARTAMENTO
      AND P1.ID < P2.ID
      AND TRUNC(ABS(MONTHS_BETWEEN(P1.ANTIGUEDAD, P2.ANTIGUEDAD))/12) < 2;

-- Ejercicio 9
SELECT A1.NOMBRE, M1.CALIFICACION, A2.NOMBRE, M2.CALIFICACION
FROM ALUMNOS A1, ALUMNOS A2, MATRICULAR M1, MATRICULAR M2
WHERE A1.GENERO = 'MASC'
      AND A2.GENERO = 'FEM'
      AND A1.DNI = M1.ALUMNO
      AND A2.DNI = M2.ALUMNO
      AND M1.ASIGNATURA = 112
      AND M2.ASIGNATURA = 112
      AND TO_CHAR(A1.FECHA_PRIM_MATRICULA, 'WW') = TO_CHAR(A2.FECHA_PRIM_MATRICULA, 'WW');

-- Ejercicio 9
SELECT A1.NOMBRE AS EL, M1.CALIFICACION, A2.NOMBRE AS ELLA, M2.CALIFICACION
FROM ALUMNOS A1, ALUMNOS A2, MATRICULAR M1, MATRICULAR M2
WHERE A1.GENERO = 'MASC'
      AND A2.GENERO = 'FEM'
      AND A1.DNI = M1.ALUMNO
      AND A2.DNI = M2.ALUMNO
      AND M1.ASIGNATURA = 112
      AND M2.ASIGNATURA = 112
      AND M1.CURSO = M2.CURSO
      AND TO_CHAR(A1.FECHA_PRIM_MATRICULA, 'WW') = TO_CHAR(A2.FECHA_PRIM_MATRICULA, 'WW')
      AND DECODE(NVL(M1.CALIFICACION, 'SP'), 'SP', 0, 'AP', 5, 'NT', 8, 'SB', 9, 10) <= DECODE(NVL(M2.CALIFICACION, 'SP'), 'SP', 0, 'AP', 5, 'NT', 8, 'SB', 9, 10);


SELECT ALUMNO, CALIFICACION, DECODE(NVL(CALIFICACION, 'SP'), 'SP', 0, 'AP', 5, 'NT', 8, 'SB', 9, 10)
FROM MATRICULAR;

-- Ejercicio 9 FINAL
SELECT A1.NOMBRE||' '||A1.APELLIDO1 AS EL, DECODE(M1.CALIFICACION,'MH',10,'SB',9,'NT',7,'AP',5,'SP',2,0) "NOTA ÉL", A2.NOMBRE||' '||A2.APELLIDO1 AS ELLA, DECODE(M2.CALIFICACION,'MH',10,'SB',9,'NT',7,'AP',5,'SP',2,0) "NOTA ELLA"
FROM ALUMNOS A1, ALUMNOS A2, MATRICULAR M1, MATRICULAR M2
WHERE A1.GENERO = 'MASC'
      AND A2.GENERO = 'FEM'
      AND A1.DNI = M1.ALUMNO
      AND A2.DNI = M2.ALUMNO
      AND M1.ASIGNATURA = 112
      AND M2.ASIGNATURA = 112
      AND TO_CHAR(A1.FECHA_PRIM_MATRICULA, 'WW') = TO_CHAR(A2.FECHA_PRIM_MATRICULA, 'WW')
      AND DECODE(M1.CALIFICACION,'MH',10,'SB',9,'NT',7,'AP',5,'SP',2,0) < DECODE(M2.CALIFICACION,'MH',10,'SB',9,'NT',7,'AP',5,'SP',2,0);

-- Ejercicio 10
SELECT A1.NOMBRE, A2.NOMBRE, A3.NOMBRE, A1.COD_MATERIA, A2.COD_MATERIA, A3.COD_MATERIA
FROM ASIGNATURAS A1, ASIGNATURAS A2, ASIGNATURAS A3
WHERE A1.COD_MATERIA = A2.COD_MATERIA
      AND A2.COD_MATERIA = A3.COD_MATERIA
      AND A1.CODIGO < A2.CODIGO
      AND A2.CODIGO < A3.CODIGO;

-------------------------------------Reunión de tablas + orden-----------------------------------------------------

-- Ejercicio 11
SELECT ALU.NOMBRE, ALU.APELLIDO1, ALU.APELLIDO2, ASIG.NOMBRE, DECODE(MAT.CALIFICACION, 'MH', 'MATRÍCULA DE HONOR',
                                                                                       'SB', 'SOBRESALIENTE',
                                                                                       'NT', 'NOTABLE',
                                                                                       'AP', 'APROBADO',
                                                                                       'SP', 'SUSPENSO',
                                                                                       'NO PRESENTADO') --by default
FROM ALUMNOS ALU, MATRICULAR MAT, ASIGNATURAS ASIG
WHERE ALU.DNI = MAT.ALUMNO
      AND  MAT.ASIGNATURA = ASIG.CODIGO
      AND (MONTHS_BETWEEN(CONVERT(DATE, GETDATE()), FECHA_NACIMIENTO)/12) > 22
      ORDER BY ALU.APELLIDO1, ALU.NOMBRE;

-- Ejercicio 12
SELECT ALU.NOMBRE, ALU.APELLIDO1, ALU.APELLIDO2
FROM IMPARTIR IMP, PROFESORES PRO, ASIGNATURAS ASIG, ALUMNOS ALU, MATRICULAR MAT
WHERE IMP.PROFESOR=PRO.ID
      AND UPPER(PRO.NOMBRE) = 'ENRIQUE'
      AND UPPER(PRO.APELLIDO1) = 'SOLER'
      AND IMP.ASIGNATURA = ASIG.CODIGO
      AND ALU.DNI = MAT.ALUMNO
      AND MAT.ASIGNATURA = IMP.ASIGNATURA
      AND MAT.CURSO = IMP.CURSO
      AND MAT.GRUPO = IMP.GRUPO
ORDER BY ALU.APELLIDO1, ALU.NOMBRE;

-- otra forma
SELECT ALU.NOMBRE, ALU.APELLIDO1, ALU.APELLIDO2
FROM ALUMNOS ALU, MATRICULAR MAT NATURAL JOIN IMPARTIR IMP, PROFESORES PRO
WHERE ALU.DNI = MAT.ALUMNO
      AND IMP.PROFESOR = PRO.ID
      AND PRO.NOMBRE = 'ENRIQUE'
      AND PRO.APELLIDO1 = 'SOLER'
ORDER BY ALU.APELLIDO1, APELLIDO2, NOMBRE;


-- Ejercicio 13-------------------------------------------------------------------
SELECT ALU.NOMBRE, ALU.APELLIDO1, ALU.APELLIDO2
FROM PROFESORES PRO, DEPARTAMENTOS DEP, IMPARTIR IMP, ALUMNOS ALU, MATRICULAR MAT
WHERE PRO.DEPARTAMENTO = DEP.CODIGO
      AND DEP.NOMBRE = 'LENGUAJES Y CIENCIAS DE LA COMPUTACION'
      AND IMP.PROFESOR = PRO.ID
      AND ALU.DNI = MAT.ALUMNO
      AND MAT.ASIGNATURA = IMP.ASIGNATURA
      AND MAT.GRUPO = IMP.GRUPO
      AND MAT.CURSO = IMP.CURSO
ORDER BY ALU.APELLIDO1;

-- otra manera:
SELECT DISTINCT ALU.NOMBRE, ALU.APELLIDO1, ALU.APELLIDO2
FROM PROFESORES PRO, DEPARTAMENTOS DEP, ALUMNOS ALU, MATRICULAR MAT NATURAL JOIN IMPARTIR IMP
WHERE PRO.DEPARTAMENTO = DEP.CODIGO
      AND IMP.PROFESOR = PRO.ID
      AND LOWER(DEP.NOMBRE) = 'LENGUAJES Y CIENCIAS DE LA COMPUTACION'
      AND ALU.DNI = MAT.ALUMNO
ORDER BY ALU.APELLIDO1;

-- Ejercicio 14 -----------------------------------------------------------------
SELECT ASIG.NOMBRE AS ASIGNATURA, MAT.NOMBRE AS MATERIA, PRO.NOMBRE||' '||PRO.APELLIDO1||' '||PRO.APELLIDO2 AS PROFESOR, IMP.CARGA_CREDITOS "CARGA CRÉDITOS"
FROM PROFESORES PRO, IMPARTIR IMP, ASIGNATURAS ASIG, MATERIAS MAT
WHERE PRO.ID = IMP.PROFESOR
      AND ASIG.CODIGO = IMP.ASIGNATURA
      AND MAT.CODIGO = ASIG.COD_MATERIA
      AND IMP.CARGA_CREDITOS IS NOT NULL
ORDER BY MAT.CODIGO, ASIG.NOMBRE DESC
;

-- Ejercicio 15 ---------------------------------------------------------------------
SELECT ASIG.NOMBRE "ASIGNATURA", DEP.NOMBRE "DEPARTAMENTO", ASIG.CREDITOS "CRÉDITOS", ROUND((ASIG.PRACTICOS*100)/ASIG.CREDITOS, 2) "% PRÁCTICOS"
FROM ASIGNATURAS ASIG, DEPARTAMENTOS DEP
WHERE ASIG.DEPARTAMENTO = DEP.CODIGO
      AND ASIG.CREDITOS IS NOT NULL
      AND ASIG.PRACTICOS IS NOT NULL
      AND ASIG.TEORICOS IS NOT NULL
ORDER BY ROUND((ASIG.PRACTICOS*100)/ASIG.CREDITOS, 4) DESC
;

-- Ejercicio 16 --------------------------------------------------------------------
(SELECT CODIGO
FROM ASIGNATURAS)
MINUS
(SELECT CODIGO
FROM ASIGNATURAS ASIG, IMPARTIR IMP
WHERE ASIG.CODIGO = IMP.ASIGNATURA);

-- Ejercicio 17 -------------------------------------------------------------------
(SELECT EMAIL
FROM PROFESORES
WHERE EMAIL IS NOT NULL)
UNION ALL
(SELECT EMAIL
FROM ALUMNOS
WHERE EMAIL IS  NOT NULL);

-- Ejercicio 18 ------------------------------------------------------------------
((SELECT INITCAP(APELLIDO1) FROM PROFESORES WHERE APELLIDO1 IS NOT NULL)
INTERSECT
(SELECT INITCAP(APELLIDO1) FROM ALUMNOS WHERE APELLIDO1 IS NOT NULL))
UNION
((SELECT INITCAP(APELLIDO1) FROM PROFESORES WHERE APELLIDO1 IS NOT NULL)
INTERSECT
(SELECT INITCAP(APELLIDO2) FROM ALUMNOS WHERE APELLIDO2 IS NOT NULL))
UNION
((SELECT INITCAP(APELLIDO2) FROM PROFESORES WHERE APELLIDO2 IS NOT NULL)
INTERSECT
(SELECT INITCAP(APELLIDO1) FROM ALUMNOS WHERE APELLIDO1 IS NOT NULL))
UNION
((SELECT INITCAP(APELLIDO2) FROM PROFESORES WHERE APELLIDO2 IS NOT NULL)
INTERSECT
(SELECT INITCAP(APELLIDO2) FROM ALUMNOS WHERE APELLIDO2 IS NOT NULL));

--  mejor:
SELECT DISTINCT INITCAP(ALU.APELLIDO1)
FROM ALUMNOS ALU, PROFESORES PRO
WHERE LOWER(ALU.APELLIDO1) = LOWER(PRO.APELLIDO1) OR LOWER(ALU.APELLIDO1) = LOWER(PRO.APELLIDO2)
UNION
SELECT DISTINCT INITCAP(ALU.APELLIDO2)
FROM ALUMNOS ALU, PROFESORES PRO
WHERE LOWER(ALU.APELLIDO2) = LOWER(PRO.APELLIDO1) OR LOWER(ALU.APELLIDO2) = LOWER(PRO.APELLIDO2);

-- Ejercicio 19 ----------------------------------------------------------------
(SELECT APELLIDO1
FROM PROFESORES WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT APELLIDO2
FROM PROFESORES WHERE UPPER(APELLIDO2) LIKE '%LL%')
UNION
(SELECT APELLIDO1
FROM ALUMNOS WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT APELLIDO2
FROM ALUMNOS WHERE UPPER(APELLIDO2) LIKE '%LL%');

-- Ejercicio 20 ---------------------------------------------------------------------
-- Solución del solucionario:
(SELECT REPLACE(APELLIDO1, 'LL', 'Y')
FROM PROFESORES WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO2, 'LL', 'Y')
FROM PROFESORES WHERE UPPER(APELLIDO2) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO1, 'LL', 'Y')
FROM ALUMNOS WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO2, 'LL', 'Y')
FROM ALUMNOS WHERE UPPER(APELLIDO2) LIKE '%LL%');

-- Solución  real
(SELECT REPLACE(APELLIDO1, 'LL', 'Y')
FROM PROFESORES WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO2, 'LL', 'Y')
FROM PROFESORES WHERE UPPER(APELLIDO2) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO1, 'LL', 'Y')
FROM ALUMNOS WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO2, 'LL', 'Y')
FROM ALUMNOS WHERE UPPER(APELLIDO2) LIKE '%LL%')

UNION

(SELECT REPLACE(APELLIDO1, 'LL', 'Y')
FROM PROFESORES WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO2, 'LL', 'Y')
FROM PROFESORES WHERE UPPER(APELLIDO2) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO1, 'LL', 'Y')
FROM ALUMNOS WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT REPLACE(APELLIDO2, 'LL', 'Y')
FROM ALUMNOS WHERE UPPER(APELLIDO2) LIKE '%LL%')

MINUS(
(SELECT APELLIDO1
FROM PROFESORES WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT APELLIDO2
FROM PROFESORES WHERE UPPER(APELLIDO2) LIKE '%LL%')
UNION
(SELECT APELLIDO1
FROM ALUMNOS WHERE UPPER(APELLIDO1) LIKE '%LL%')
UNION
(SELECT APELLIDO2
FROM ALUMNOS WHERE UPPER(APELLIDO2) LIKE '%LL%'));

-- Reuniones externas: select ... from ... a (left/right) outer join b on () where ...

-- Ejercicio 21-----------------------------------------------------------------------
SELECT ASIG.NOMBRE, IMP.PROFESOR
FROM ASIGNATURAS ASIG LEFT OUTER JOIN IMPARTIR IMP ON(ASIG.CODIGO = IMP.ASIGNATURA)
WHERE ASIG.TEORICOS + ASIG.PRACTICOS != ASIG.CREDITOS
      OR ((TEORICOS IS NULL OR PRACTICOS IS NULL) AND CREDITOS IS NOT NULL);

-- Ejercicio 22 ------------------------------------------------------------------
SELECT P1.NOMBRE||' '||P1.APELLIDO1||' '||P1.APELLIDO2 "PROFESOR", P2.NOMBRE||' '||P2.APELLIDO1||' '||P2.APELLIDO2 "DIRECTOR DE TESIS"
FROM PROFESORES P1 LEFT OUTER JOIN PROFESORES P2 ON (P1.DIRECTOR_TESIS = P2.ID)
ORDER BY P1.APELLIDO1;

-- Ejercicio 23 ------------------------------------------------------------------
SELECT 'EL DIRECTOR DE '||P1.NOMBRE||' '||P1.APELLIDO1||' '||P1.APELLIDO2||' ES '||P2.NOMBRE||' '||P2.APELLIDO1||' '||P2.APELLIDO2 AS TESIS, NVL(INV.TRAMOS,0)
FROM PROFESORES P1, PROFESORES P2 LEFT OUTER JOIN INVESTIGADORES INV ON(P2.ID = INV.ID_PROFESOR)
WHERE P1.DIRECTOR_TESIS = P2.ID;

-- Ejercicio 24 -----------------------------------------------------------------
SELECT ALU1.NOMBRE, ALU1.APELLIDO1, ALU1.APELLIDO2, ALU2.NOMBRE, ALU2.APELLIDO1, ALU2.APELLIDO2, ALU1.FECHA_PRIM_MATRICULA, ALU2.FECHA_PRIM_MATRICULA
FROM ALUMNOS ALU1 LEFT OUTER JOIN ALUMNOS ALU2 ON(ALU1.FECHA_PRIM_MATRICULA = ALU2.FECHA_PRIM_MATRICULA
                                                    AND ALU1.DNI != ALU2.DNI)
ORDER BY ALU1.APELLIDO1;

-- Resultado correcto:
SELECT ALU1.NOMBRE, ALU1.APELLIDO1, ALU1.APELLIDO2, ALU2.NOMBRE, ALU2.APELLIDO1, ALU2.APELLIDO2, ALU1.FECHA_PRIM_MATRICULA, ALU2.FECHA_PRIM_MATRICULA
FROM ALUMNOS ALU1 LEFT OUTER JOIN ALUMNOS ALU2 ON(ALU1.FECHA_PRIM_MATRICULA LIKE ALU2.FECHA_PRIM_MATRICULA
                                                    AND ALU1.DNI != ALU2.DNI)
ORDER BY ALU1.APELLIDO1;

-- Ejercicio 25
SELECT ASIG.NOMBRE AS ASIGNATURA, IMP.CURSO, IMP.GRUPO, PRO.NOMBRE, PRO.APELLIDO1
FROM ASIGNATURAS ASIG LEFT OUTER JOIN IMPARTIR IMP ON (ASIG.CODIGO = IMP.ASIGNATURA)
		      LEFT OUTER JOIN PROFESORES PRO ON (IMP.PROFESOR = PRO.ID)
ORDER BY ASIG.NOMBRE;

-- Subconsultas------------------------------------------------------------------

-- Ejercicio 26 -------------------------------------------------------------------
SELECT NOMBRE, APELLIDO1, ID
FROM PROFESORES PRO
WHERE ID NOT IN (SELECT PROFESOR
                  FROM IMPARTIR IMP);

SELECT NOMBRE, APELLIDO1, ID
FROM PROFESORES PRO
WHERE NOT EXISTS (SELECT PROFESOR
                  FROM IMPARTIR IMP
                  WHERE PRO.ID = IMP.PROFESOR);

-- Ejercicio 27 --------------------------------------------------------------------
SELECT NOMBRE, APELLIDO1, APELLIDO2
FROM ALUMNOS
WHERE DNI IN (SELECT ALUMNO FROM MATRICULAR
              WHERE ASIGNATURA = 115
              AND GENERO = 'FEM')
      AND ROWNUM < 3;

SELECT NOMBRE, APELLIDO1, APELLIDO2
FROM ALUMNOS AL
WHERE EXISTS (SELECT * FROM MATRICULAR MAT
              WHERE ASIGNATURA = 115
              AND GENERO = 'FEM'
              AND AL.DNI = MAT.ALUMNO)
      AND ROWNUM < 3;

-- Ejercicio 28 ------------------------------------------------------------------
SELECT *
FROM PROFESORES
WHERE ID NOT IN (SELECT DIRECTOR_TESIS
                  FROM PROFESORES
                  WHERE DIRECTOR_TESIS IS NOT NULL);


SELECT *
FROM PROFESORES P1
WHERE NOT EXISTS (SELECT *
                  FROM PROFESORES P2
                  WHERE P1.ID = P2.DIRECTOR_TESIS);

-- Ejercicio 29 -----------------------------------------------------------------
SELECT NOMBRE, CODIGO
FROM ASIGNATURAS A1
WHERE A1.CREDITOS < ANY(SELECT CREDITOS
                      FROM ASIGNATURAS A2
                      WHERE A1.CURSO = A2.CURSO);

-- Ejercicio 30 -------------------------------------------------------------------
SELECT NOMBRE, CODIGO
FROM ASIGNATURAS
WHERE CURSO IS NOT NULL
MINUS
(SELECT NOMBRE, CODIGO
FROM ASIGNATURAS A1
WHERE A1.CREDITOS < ANY(SELECT CREDITOS
                      FROM ASIGNATURAS A2
                      WHERE A1.CURSO = A2.CURSO));
